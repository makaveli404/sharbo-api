name: .NET CI & Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version (without v prefix)'
        required: false
        default: '0.1.0'

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: "1"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
  DOTNET_IMAGE: "mcr.microsoft.com/dotnet/sdk:9.0"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bin
          path: |
            **/bin/

  test:
    name: Test + Coverage
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build (Debug)
        run: dotnet build --no-restore

      - name: Run tests with code coverage
        shell: bash
        run: |
          dotnet test --collect:"XPlat Code Coverage" --logger:"junit;LogFilePath=SharboLog.xml"
          dotnet tool install --global dotnet-reportgenerator-globaltool
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          reportgenerator -reports:./**/coverage.cobertura.xml -targetdir:coveragereport -reporttypes:cobertura
          COVERAGE_VALUE=$(grep -oPm 1 'line-rate="\K([0-9.]+)' "./coveragereport/Cobertura.xml")
          COVERAGE=$(awk -v v="$COVERAGE_VALUE" 'BEGIN { printf "%.2f", v*100 }')
          echo "TOTAL_COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: Upload coverage and JUnit reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            coveragereport/Cobertura.xml
            **/SharboLog.xml

      # Generate Shields.io JSON badge based on coverage
      - name: Compute badge color
        shell: bash
        run: |
          C="${{ env.TOTAL_COVERAGE }}"
          awk -v c="$C" 'BEGIN{
            if(c>=90) print "brightgreen";
            else if(c>=80) print "green";
            else if(c>=70) print "yellowgreen";
            else if(c>=60) print "yellow";
            else if(c>=50) print "orange";
            else print "red";
          }' > .color.txt
          echo "COLOR=$(cat .color.txt)" >> "$GITHUB_ENV"

      - name: Write Shields endpoint JSON
        shell: bash
        run: |
          mkdir -p .github/badges
          cat > .github/badges/coverage.json <<EOF
          {"schemaVersion":1,"label":"coverage","message":"${{ env.TOTAL_COVERAGE }}%","color":"${{ env.COLOR }}"}
          EOF
          cat .github/badges/coverage.json

      - name: Push coverage.json to 'badges' branch
        if: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
        shell: bash
        run: |

          set -e

          # Make sure we have the file locally (created earlier)
          test -f .github/badges/coverage.json
          
          git fetch origin badges || true

          if git show-ref --verify --quiet refs/heads/badges; then
            git checkout badges
          else
            git checkout -b badges
          fi

          if git show-ref --verify --quiet refs/remotes/origin/badges; then
            git merge --ff-only origin/badges || true
          fi

          git add .github/badges/coverage.json
          if ! git diff --cached --quiet; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git commit -m "chore(badge): update coverage ${{ env.TOTAL_COVERAGE }}%"
            git push -u origin badges
          else
            echo "No changes to coverage.json"
          fi

  release:
    name: Release (Docker image)
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'workflow_dispatch' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    permissions:
      contents: read
      packages: write
    env:
      VERSION: ${{ inputs.version }}
      IMAGE_NAME: ghcr.io/${{ github.repository }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=v${{ env.VERSION }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
