// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharboAPI.Infrastructure;

#nullable disable

namespace SharboAPI.Infrastructure.Migrations
{
    [DbContext(typeof(SharboDbContext))]
    [Migration("20250129123658_Init_DeleteUnusedPropsFromUsersAndChangePK")]
    partial class Init_DeleteUnusedPropsFromUsersAndChangePK
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1");

            modelBuilder.Entity("EntryUser", b =>
                {
                    b.Property<int>("EntriesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParticipantsEmail")
                        .HasColumnType("TEXT");

                    b.HasKey("EntriesId", "ParticipantsEmail");

                    b.HasIndex("ParticipantsEmail");

                    b.ToTable("EntryParticipants", (string)null);
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedByEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModificationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedByEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByEmail");

                    b.HasIndex("LastModifiedByEmail");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedByEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedByEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByEmail");

                    b.HasIndex("LastModifiedByEmail");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.GroupParticipants", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserEmail")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupId", "UserEmail");

                    b.HasIndex("UserEmail");

                    b.ToTable("GroupParticipants");
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.Meme", b =>
                {
                    b.Property<int>("EntryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasIndex("EntryId");

                    b.ToTable("Memes");
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.Quote", b =>
                {
                    b.Property<int>("EntryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("EntryId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.Situation", b =>
                {
                    b.Property<int>("EntryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("EntryId");

                    b.ToTable("Situations");
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntryUser", b =>
                {
                    b.HasOne("SharboAPI.Domain.Models.Entry", null)
                        .WithMany()
                        .HasForeignKey("EntriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharboAPI.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.Entry", b =>
                {
                    b.HasOne("SharboAPI.Domain.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharboAPI.Domain.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedByEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.Group", b =>
                {
                    b.HasOne("SharboAPI.Domain.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharboAPI.Domain.Models.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedByEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.GroupParticipants", b =>
                {
                    b.HasOne("SharboAPI.Domain.Models.Group", "Group")
                        .WithMany("GroupParticipants")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharboAPI.Domain.Models.User", "User")
                        .WithMany("GroupParticipants")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.Meme", b =>
                {
                    b.HasOne("SharboAPI.Domain.Models.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.Quote", b =>
                {
                    b.HasOne("SharboAPI.Domain.Models.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.Situation", b =>
                {
                    b.HasOne("SharboAPI.Domain.Models.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.Group", b =>
                {
                    b.Navigation("GroupParticipants");
                });

            modelBuilder.Entity("SharboAPI.Domain.Models.User", b =>
                {
                    b.Navigation("GroupParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
