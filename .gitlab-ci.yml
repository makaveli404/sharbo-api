stages:
  - build
  - test
  - release

variables:
  version: 0.1.0
  CONTAINER_RELEASE_IMAGE_VERSION: $CI_CONTAINER_IMAGE:v$version
  CONTAINER_RELEASE_IMAGE_LATEST: $CI_CONTAINER_IMAGE:latest
  DOTNET_CLI_TELEMETRY_OPTOUT: "1"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
  DOTNET_IMAGE: "mcr.microsoft.com/dotnet/sdk:9.0"
  DOCKER_IMAGE: "docker:latest"

build:
  image: $DOTNET_IMAGE
  stage: build
  script:
    - dotnet restore
    - dotnet build --configuration Release
  artifacts:
    paths:
      - bin/

test:
  image: $DOTNET_IMAGE
  stage: test
  script:
    - dotnet restore
    - dotnet build
    - dotnet test --collect:"XPlat Code Coverage" --logger:"junit;LogFilePath=SharboLog.xml"
    - dotnet tool install --global dotnet-reportgenerator-globaltool
    - export PATH="$PATH:/root/.dotnet/tools"
    - reportgenerator -reports:./**/coverage.cobertura.xml -targetdir:coveragereport -reporttypes:cobertura
    - COVERAGE_VALUE=$(grep -oPm 1 'line-rate="\K([0-9.]+)' "./coveragereport/Cobertura.xml")
    - COVERAGE=$(echo "$COVERAGE_VALUE" | awk '{printf "%.2f", $1 * 100}')
    - 'echo "TOTAL_COVERAGE=$COVERAGE%"'
  coverage: '/TOTAL_COVERAGE=(\d+.\d+)/'
  artifacts:
    reports:
      junit: ./**/SharboLog.xml
    paths:
      - coveragereport/Cobertura.xml
      - ./**/SharboLog.xml

release:
  image: $DOCKER_IMAGE
  stage: release
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CONTAINER_RELEASE_IMAGE_VERSION .
    - docker tag $CONTAINER_RELEASE_IMAGE_VERSION $CONTAINER_RELEASE_IMAGE_VERSION
    - docker push $CONTAINER_RELEASE_IMAGE_VERSION
    - docker tag $CONTAINER_RELEASE_IMAGE_VERSION $CONTAINER_RELEASE_IMAGE_LATEST
    - docker push $CONTAINER_RELEASE_IMAGE_LATEST
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
    - when: never
